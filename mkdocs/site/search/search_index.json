{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Accueil : TP2 @Auteur : TONDON C\u00e9sar Sujet Ecrire une application JAVA qui simule le remplissage d\u2019une baignoire qui fuit parall\u00e8lement. L'objectif est faire le bilan sur le \"co\u00fbt\" de chaque simulation : quantit\u00e9 d'eau utilis\u00e9e dur\u00e9e de remplissage etc\u2026 Pr\u00e9cisions L\u2019application sera r\u00e9alis\u00e9e sous la forme d\u2019une interface graphique interactive con\u00e7ue avec Java FX. L\u2019application devrait pouvoir \u00eatre param\u00e9tr\u00e9e facilement : volume de la baignoire d\u00e9bit du robinet de remplissage, nombre de \"trous\" dans la baignoire d\u00e9bit de fuite de chaque trou Structure de la documentation Accueil # Accueil de la documentation Installation # Documentation installation Utilisation # Documentation utilisateur Technique # Documentation technique Contact : cesar.tondon1@etu.univ-lorraine.fr","title":"Accueil"},{"location":"index.html#accueil-tp2","text":"@Auteur : TONDON C\u00e9sar","title":"Accueil : TP2"},{"location":"index.html#sujet","text":"Ecrire une application JAVA qui simule le remplissage d\u2019une baignoire qui fuit parall\u00e8lement. L'objectif est faire le bilan sur le \"co\u00fbt\" de chaque simulation : quantit\u00e9 d'eau utilis\u00e9e dur\u00e9e de remplissage etc\u2026","title":"Sujet"},{"location":"index.html#precisions","text":"L\u2019application sera r\u00e9alis\u00e9e sous la forme d\u2019une interface graphique interactive con\u00e7ue avec Java FX. L\u2019application devrait pouvoir \u00eatre param\u00e9tr\u00e9e facilement : volume de la baignoire d\u00e9bit du robinet de remplissage, nombre de \"trous\" dans la baignoire d\u00e9bit de fuite de chaque trou","title":"Pr\u00e9cisions"},{"location":"index.html#structure-de-la-documentation","text":"Accueil # Accueil de la documentation Installation # Documentation installation Utilisation # Documentation utilisateur Technique # Documentation technique Contact : cesar.tondon1@etu.univ-lorraine.fr","title":"Structure de la documentation"},{"location":"install.html","text":"Documentation installation @Auteur : TONDON C\u00e9sar Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Contact : cesar.tondon1@etu.univ-lorraine.fr","title":"Installation"},{"location":"install.html#documentation-installation","text":"@Auteur : TONDON C\u00e9sar","title":"Documentation installation"},{"location":"install.html#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"install.html#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Contact : cesar.tondon1@etu.univ-lorraine.fr","title":"Project layout"},{"location":"tech.html","text":"Documentation technique @Auteur : TONDON C\u00e9sar Structure du projet App.java Launcher.java controller/ Controller.java # controleur principal de l'application model/ # package contenant l'ensemble des objets Baignoire.java Robinet.java Trou.java service/ # package contenant l'ensemble des creations de services FuiteService.java RemplissageService.java Commandes [../bindist/bin/] run.bat - Lancement Windows OS [../bindist/bin/] ./run - Lancement Linux OS [../src/main/java/] java Launcher.class - Lancement depuis le fichier .class Conception Interface MVC (Model-View-Controller) : Il met l'accent sur la s\u00e9paration entre la logique m\u00e9tier et l'affichage du logiciel. Les 3 parties du mod\u00e8le de conception de logiciel MVC peuvent \u00eatre d\u00e9crites comme suit : Model (mod\u00e8le) : g\u00e8re les donn\u00e9es et la logique m\u00e9tier. View (vue) : g\u00e8re la disposition et l'affichage. Controller (contr\u00f4leur) : achemine les commandes des parties \"model\" et \"view\". L'interface est divis\u00e9e en trois parties : D'une part, la centrale repr\u00e9sentant la simulation depuis un sch\u00e9ma anim\u00e9. D'autre part, la partie \u00e0 gauche se focusant sur le param\u00e8trage de la simulation. Enfin, en bas, les r\u00e9sultats suite \u00e0 la simulation. Conception Objets Class Baignoire : Une baignoire est repr\u00e9sent\u00e9e selon sa quantit\u00e9, capacit\u00e9 et son d\u00e9bordement. Elle voit sa quantit\u00e9 d'eau (L) augmenter ou diminuer. Elle ne peut pas avoir une quantit\u00e9 sup\u00e9rieur \u00e0 sa capacit\u00e9 ou inf\u00e9rieur \u00e0 0. Class Robinet : Un robinet appartient \u00e0 une baignoire selon un d\u00e9bit fixe. Le robinet a pour fonction de remplir la baignoire. Class Trou : Un trou appartient \u00e0 une baignore selon un d\u00e9bit fixe. Le trou a pour fonction vider la baignoire. Class FuiteService : Repr\u00e9sente l'action de fuite d'une baignoire r\u00e9alis\u00e9e par un trou. Toutes les secondes, le service va ex\u00e9cuter l'action de trou sur la baignoire. Class RemplissageService : Repr\u00e9sente l'action de remplissage d'une baignoire r\u00e9alis\u00e9e par un robinet. Toutes les secondes, le service va ex\u00e9cuter l'action du robinet sur la baignoire. Class Controller : Controleur du mod\u00e8le MVC pour permettre les int\u00e9ractions entre l'utilisation et la machine. Choix et principes de parall\u00e9lisations des t\u00e2ches Pour la r\u00e9alisation de cette simulation, nous utilisons la programmation concurrente . Elle permet d'\u00e9x\u00e9cuter plusieurs calculs simultan\u00e9ment au lieu d'\u00eatre s\u00e9quentiels. Ici, le remplissage de la baignoire s'\u00e9x\u00e9cute en m\u00eame temps que ses multiples fuites. C'est pourquoi, nous avons choisi de cr\u00e9er un service RemplissageService afin de repr\u00e9senter l'unique remplissage de la baignoire. De plus, nous avons cr\u00e9\u00e9 le service FuiteService pour repr\u00e9senter le calcul d'une fuite. Pour que les calculs des fuites se r\u00e9alisent simultan\u00e9ment, nous avons list\u00e9 ses services, afin de les \u00e9x\u00e9cuter via un m\u00e9canisme de verrouillage : Synchronisation . Lors du lancement de la simulation, l'ensemble des services sont \u00e9x\u00e9cut\u00e9s sur une p\u00e9riode d'une seconde d'\u00e9x\u00e9cution. Lors de l'arr\u00eat de la simulation, si des calculs sont en cours, nous les cessons et calculons les r\u00e9sultats. Contact : cesar.tondon1@etu.univ-lorraine.fr","title":"Technique"},{"location":"tech.html#documentation-technique","text":"@Auteur : TONDON C\u00e9sar","title":"Documentation technique"},{"location":"tech.html#structure-du-projet","text":"App.java Launcher.java controller/ Controller.java # controleur principal de l'application model/ # package contenant l'ensemble des objets Baignoire.java Robinet.java Trou.java service/ # package contenant l'ensemble des creations de services FuiteService.java RemplissageService.java","title":"Structure du projet"},{"location":"tech.html#commandes","text":"[../bindist/bin/] run.bat - Lancement Windows OS [../bindist/bin/] ./run - Lancement Linux OS [../src/main/java/] java Launcher.class - Lancement depuis le fichier .class","title":"Commandes"},{"location":"tech.html#conception-interface","text":"MVC (Model-View-Controller) : Il met l'accent sur la s\u00e9paration entre la logique m\u00e9tier et l'affichage du logiciel. Les 3 parties du mod\u00e8le de conception de logiciel MVC peuvent \u00eatre d\u00e9crites comme suit : Model (mod\u00e8le) : g\u00e8re les donn\u00e9es et la logique m\u00e9tier. View (vue) : g\u00e8re la disposition et l'affichage. Controller (contr\u00f4leur) : achemine les commandes des parties \"model\" et \"view\". L'interface est divis\u00e9e en trois parties : D'une part, la centrale repr\u00e9sentant la simulation depuis un sch\u00e9ma anim\u00e9. D'autre part, la partie \u00e0 gauche se focusant sur le param\u00e8trage de la simulation. Enfin, en bas, les r\u00e9sultats suite \u00e0 la simulation.","title":"Conception Interface"},{"location":"tech.html#conception-objets","text":"Class Baignoire : Une baignoire est repr\u00e9sent\u00e9e selon sa quantit\u00e9, capacit\u00e9 et son d\u00e9bordement. Elle voit sa quantit\u00e9 d'eau (L) augmenter ou diminuer. Elle ne peut pas avoir une quantit\u00e9 sup\u00e9rieur \u00e0 sa capacit\u00e9 ou inf\u00e9rieur \u00e0 0. Class Robinet : Un robinet appartient \u00e0 une baignoire selon un d\u00e9bit fixe. Le robinet a pour fonction de remplir la baignoire. Class Trou : Un trou appartient \u00e0 une baignore selon un d\u00e9bit fixe. Le trou a pour fonction vider la baignoire. Class FuiteService : Repr\u00e9sente l'action de fuite d'une baignoire r\u00e9alis\u00e9e par un trou. Toutes les secondes, le service va ex\u00e9cuter l'action de trou sur la baignoire. Class RemplissageService : Repr\u00e9sente l'action de remplissage d'une baignoire r\u00e9alis\u00e9e par un robinet. Toutes les secondes, le service va ex\u00e9cuter l'action du robinet sur la baignoire. Class Controller : Controleur du mod\u00e8le MVC pour permettre les int\u00e9ractions entre l'utilisation et la machine.","title":"Conception Objets"},{"location":"tech.html#choix-et-principes-de-parallelisations-des-taches","text":"Pour la r\u00e9alisation de cette simulation, nous utilisons la programmation concurrente . Elle permet d'\u00e9x\u00e9cuter plusieurs calculs simultan\u00e9ment au lieu d'\u00eatre s\u00e9quentiels. Ici, le remplissage de la baignoire s'\u00e9x\u00e9cute en m\u00eame temps que ses multiples fuites. C'est pourquoi, nous avons choisi de cr\u00e9er un service RemplissageService afin de repr\u00e9senter l'unique remplissage de la baignoire. De plus, nous avons cr\u00e9\u00e9 le service FuiteService pour repr\u00e9senter le calcul d'une fuite. Pour que les calculs des fuites se r\u00e9alisent simultan\u00e9ment, nous avons list\u00e9 ses services, afin de les \u00e9x\u00e9cuter via un m\u00e9canisme de verrouillage : Synchronisation . Lors du lancement de la simulation, l'ensemble des services sont \u00e9x\u00e9cut\u00e9s sur une p\u00e9riode d'une seconde d'\u00e9x\u00e9cution. Lors de l'arr\u00eat de la simulation, si des calculs sont en cours, nous les cessons et calculons les r\u00e9sultats. Contact : cesar.tondon1@etu.univ-lorraine.fr","title":"Choix et principes de parall\u00e9lisations des t\u00e2ches"},{"location":"use.html","text":"Documentation utilisateur @Auteur : TONDON C\u00e9sar Contexte Cette application permet de simuler le remplissage d'une baignoire en fonction de plusieurs param\u00e8tres : Son volume (capicit\u00e9 max) Son d\u00e9bit de remplissage (robinet) Ses d\u00e9bits de fuites (trous) La simulation ne peut \u00eatre lanc\u00e9e que si au moins le volume de la baignore et le d\u00e9bit de son robinet sont saisies. Param\u00e8tres Pour param\u00e8trer votre simulation, vous disposez \u00e0 votre gauche, un formulaire. Chaque saisie peut s'effectuer soit en \u00e9crivant le nombre, soit en utilisant les boutons \"Up\" et \"Down\". En fonction de votre saisie du nombre de trous, il vous faudra saisir pour chaque trou son d\u00e9bit. Lancement simulation Pour lancer la simulation, cliquez sur le bouton \"D\u00e9marrer\", en haut. Arr\u00eat simulation Pour arr\u00eater la simulation, cliquez sur le bouton \"Arr\u00eater\", en haut. La simulation continuera tant que l'utilisateur n'aura pas d\u00e9cid\u00e9 de l'arr\u00eater. Analyse des r\u00e9sultats Apr\u00e8s simulation, vous trouverez les r\u00e9sultats de votre simulation en bas. Les r\u00e9sultats disponibles : quantit\u00e9 d'eau utilis\u00e9e quantit\u00e9 d'eau dans la baignoire quantit\u00e9 d'eau d\u00e9bord\u00e9e de la baignoire Contact : cesar.tondon1@etu.univ-lorraine.fr","title":"Utilisation"},{"location":"use.html#documentation-utilisateur","text":"@Auteur : TONDON C\u00e9sar","title":"Documentation utilisateur"},{"location":"use.html#contexte","text":"Cette application permet de simuler le remplissage d'une baignoire en fonction de plusieurs param\u00e8tres : Son volume (capicit\u00e9 max) Son d\u00e9bit de remplissage (robinet) Ses d\u00e9bits de fuites (trous) La simulation ne peut \u00eatre lanc\u00e9e que si au moins le volume de la baignore et le d\u00e9bit de son robinet sont saisies.","title":"Contexte"},{"location":"use.html#parametres","text":"Pour param\u00e8trer votre simulation, vous disposez \u00e0 votre gauche, un formulaire. Chaque saisie peut s'effectuer soit en \u00e9crivant le nombre, soit en utilisant les boutons \"Up\" et \"Down\". En fonction de votre saisie du nombre de trous, il vous faudra saisir pour chaque trou son d\u00e9bit.","title":"Param\u00e8tres"},{"location":"use.html#lancement-simulation","text":"Pour lancer la simulation, cliquez sur le bouton \"D\u00e9marrer\", en haut.","title":"Lancement simulation"},{"location":"use.html#arret-simulation","text":"Pour arr\u00eater la simulation, cliquez sur le bouton \"Arr\u00eater\", en haut. La simulation continuera tant que l'utilisateur n'aura pas d\u00e9cid\u00e9 de l'arr\u00eater.","title":"Arr\u00eat simulation"},{"location":"use.html#analyse-des-resultats","text":"Apr\u00e8s simulation, vous trouverez les r\u00e9sultats de votre simulation en bas. Les r\u00e9sultats disponibles : quantit\u00e9 d'eau utilis\u00e9e quantit\u00e9 d'eau dans la baignoire quantit\u00e9 d'eau d\u00e9bord\u00e9e de la baignoire Contact : cesar.tondon1@etu.univ-lorraine.fr","title":"Analyse des r\u00e9sultats"}]}